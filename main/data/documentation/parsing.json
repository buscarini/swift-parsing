{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"abstract":[{"text":"The collecton of videos from ","type":"text"},{"identifier":"https:\/\/www.pointfree.co","type":"reference","isActive":true},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","interfaceLanguage":"swift"},"topicSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]}],"primaryContentSections":[{"content":[{"text":"Additional Resources","level":2,"type":"heading","anchor":"Additional-Resources"},{"items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Parsing with this library is performed by listing out many small parsers that describe how to"},{"type":"text","text":" "},{"type":"text","text":"incrementally consume small bits from the beginning of an input string. For example, suppose you"},{"type":"text","text":" "},{"type":"text","text":"have a string that holds some user data that you want to parse into an array of "},{"code":"User","type":"codeVoice"},{"type":"text","text":"s:"}],"type":"paragraph"},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}],"type":"paragraph"},{"code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This says that to parse a user we:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parse and consume an integer from the beginning of the input"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"then a comma"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then everything up to the next comma"}]}]},{"content":[{"inlineContent":[{"text":"then another comma","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and finally a boolean.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Run the ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" parser many times","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"between each invocation of ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" we run the separator parser to consume a newline","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits"},{"type":"text","text":" "},{"type":"text","text":"an error that describes exactly what went wrong:"}],"type":"paragraph"},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"symbolKind":"module","title":"Parsing","role":"collection","roleHeading":"Framework","modules":[{"name":"Parsing"}],"externalID":"Parsing"},"sections":[],"references":{"https://www.pointfree.co/collections/parsing":{"title":"Point-Free Videos","type":"link","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}],"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","url":"https:\/\/www.pointfree.co\/collections\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","kind":"article","title":"Getting Started","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","role":"symbol","title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"url":"\/documentation\/parsing\/countingrange","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"role":"symbol","abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","title":"CountingRange","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"navigatorTitle":[{"kind":"identifier","text":"Consumed"}],"abstract":[{"type":"text","text":"A parser that returns the subsequence of input consumed by another parser."}],"url":"\/documentation\/parsing\/consumed","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Consumed"}],"type":"topic","title":"Consumed","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"title":"Digits","type":"topic","url":"\/documentation\/parsing\/digits","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","kind":"symbol","abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"navigatorTitle":[{"text":"Digits","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"url":"\/documentation\/parsing\/conditional","title":"Conditional","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"abstract":[],"type":"topic","role":"symbol","kind":"symbol","deprecated":true},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error messages","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/errormessages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"url":"\/documentation\/parsing\/parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","role":"symbol","title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic"},"https://github.com/pointfreeco/swift-parsing/discussions":{"titleInlineContent":[{"text":"Discussions","type":"text"}],"title":"Discussions","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/design","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic"},"https://github.com/pointfreeco/swift-parsing/":{"titleInlineContent":[{"text":"GitHub Repo","type":"text"}],"title":"GitHub Repo","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"title":"String Abstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic"}}}