{"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Parsing"}],"title":"Design","role":"article"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Protocol","anchor":"Protocol"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine"},{"type":"text","text":" "},{"type":"text","text":"framework. A parser is represented as a protocol that many types conform to, and then parser"},{"type":"text","text":" "},{"type":"text","text":"transformations (also known as “combinators”) are methods that return concrete types conforming to"},{"type":"text","text":" "},{"type":"text","text":"the parser protocol."}]},{"type":"paragraph","inlineContent":[{"text":"For example, to parse all the characters from the beginning of a substring until you encounter a","type":"text"},{"text":" ","type":"text"},{"text":"comma you can use the ","type":"text"},{"type":"codeVoice","code":"Prefix"},{"text":" parser:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""]},{"type":"paragraph","inlineContent":[{"text":"The type of this parser is:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Prefix<Substring>"]},{"type":"paragraph","inlineContent":[{"text":"We can ","type":"text"},{"code":".map","type":"codeVoice"},{"text":" on this parser in order to transform its output, which in this case is the string","type":"text"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this parser is now:"}]},{"type":"codeListing","syntax":"swift","code":["Parsers.Map<Prefix<Substring>, Substring>"]},{"type":"paragraph","inlineContent":[{"text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of","type":"text"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}]},{"level":2,"type":"heading","text":"Result Builders","anchor":"Result-Builders"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library takes advantage of Swift’s "},{"type":"codeVoice","code":"@resultBuilder"},{"type":"text","text":" feature to make constructing complex parsers"},{"type":"text","text":" "},{"type":"text","text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main"},{"type":"text","text":" "},{"type":"text","text":"entry point into building a parser is the "},{"type":"codeVoice","code":"Parse"},{"type":"text","text":" builder:"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","","}"]},{"type":"paragraph","inlineContent":[{"text":"In this builder block you can specify parsers that will be run one after another. For example, if","type":"text"},{"text":" ","type":"text"},{"text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type conforms to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}]},{"type":"paragraph","inlineContent":[{"text":"Many of the parsers and operators that come with the library are configured with parser builders","type":"text"},{"text":" ","type":"text"},{"text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where","type":"text"},{"text":" ","type":"text"},{"text":"parenthesized numbers are negative, we can use the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" parser builder:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"]},{"level":2,"type":"heading","text":"Operators","anchor":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parser operators (also called “combinators”) are methods defined on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol that"},{"type":"text","text":" "},{"type":"text","text":"return a parser. For example, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)"},{"type":"text","text":" operator is a method that returns something"},{"type":"text","text":" "},{"type":"text","text":"called a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"And ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"text":" is a dedicated type that implements the logic of the map operation. In","type":"text"},{"text":" ","type":"text"},{"text":"particular, in runs the upstream parser and then transforms its output:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types that conform to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}]}],"kind":"content"}],"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/design"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","role":"symbol","title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"url":"\/documentation\/parsing\/parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","role":"symbol","title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","kind":"article","title":"Getting Started","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"type":"topic","url":"\/documentation\/parsing\/parsers\/map","abstract":[{"text":"A parser that transforms the output of another parser with a given closure.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Map"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","kind":"symbol","title":"Parsers.Map","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)","abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"title":"map(_:)","type":"topic","url":"\/documentation\/parsing\/parser\/map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Map","preciseIdentifier":"s:7Parsing7ParsersO3MapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"title":"OneOf","type":"topic","url":"\/documentation\/parsing\/oneof","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error messages","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/errormessages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"title":"String Abstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic"}}}