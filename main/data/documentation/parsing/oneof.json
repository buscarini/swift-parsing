{"metadata":{"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"externalID":"s:7Parsing5OneOfV","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"modules":[{"name":"Parsing"}],"symbolKind":"struct","title":"OneOf","role":"symbol"},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"seeAlsoSections":[{"generated":true,"title":"Common parsers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"topicSections":[{"title":"Builder","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder"]},{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/Parser-Implementations"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","type":"reference"},{"type":"text","text":" result builder block."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" to parse an enum value. To do so, it spells out a list of"},{"type":"text","text":" "},{"type":"text","text":"parsers to "},{"type":"codeVoice","code":"OneOf"},{"type":"text","text":", one for each case:"}]},{"type":"codeListing","syntax":"swift","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"]},{"type":"paragraph","inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""]},{"type":"paragraph","inlineContent":[{"text":"If you are parsing input that should coalesce into some default, avoid using a final ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"parser, and instead opt for a trailing ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/replaceError(with:)","type":"reference","isActive":true},{"text":", which returns a parser that","type":"text"},{"text":" ","type":"text"},{"text":"cannot fail:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"]},{"type":"heading","level":2,"text":"Specificity","anchor":"Specificity"},{"type":"paragraph","inlineContent":[{"text":"The order of the parsers in the above ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" does not matter because each of “€”, “£” and “$”","type":"text"},{"text":" ","type":"text"},{"text":"are mutually exclusive, i.e. at most one will succeed on any given input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple"},{"type":"text","text":" "},{"type":"text","text":"can succeed on a given input) you must order them from most specific to least specific. That is,"},{"type":"text","text":" "},{"type":"text","text":"the first parser should succeed on the fewest number of inputs and the last parser should"},{"type":"text","text":" "},{"type":"text","text":"succeed on the most number of inputs."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of","type":"text"},{"text":" ","type":"text"},{"text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they","type":"text"},{"text":" ","type":"text"},{"text":"are quoted:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}]},{"type":"paragraph","inlineContent":[{"text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only","type":"text"},{"text":" ","type":"text"},{"text":"if that fails we can parse a plain field that takes everything up until the next comma or","type":"text"},{"text":" ","type":"text"},{"text":"newline:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can parse many fields to form an array of fields making up a line, and then parse many"},{"type":"text","text":" "},{"type":"text","text":"lines to make up a full, doubly-nested array for the CSV:"}]},{"type":"codeListing","syntax":"swift","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"]},{"type":"paragraph","inlineContent":[{"text":"Running this parser on the input shows that it properly isolates each field of the CSV, even","type":"text"},{"text":" ","type":"text"},{"text":"fields that are quoted and contain a comma:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"]},{"type":"paragraph","inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"type":"codeVoice","code":"OneOf"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let field = OneOf {","  quotedField","  plainField","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"quotedField","type":"codeVoice"},{"type":"text","text":" parser is a "},{"type":"emphasis","inlineContent":[{"text":"more","type":"text"}]},{"type":"text","text":" specific parser in that it will succeed on fewer inputs"},{"type":"text","text":" "},{"type":"text","text":"than the "},{"code":"plainField","type":"codeVoice"},{"type":"text","text":" parser does. For example:"}]},{"type":"codeListing","syntax":"swift","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"]},{"type":"paragraph","inlineContent":[{"text":"Whereas the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser will happily succeed on anything the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser will","type":"text"},{"text":" ","type":"text"},{"text":"succeed on:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"]},{"type":"paragraph","inlineContent":[{"text":"For this reason the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser must be listed first so that it can try its logic","type":"text"},{"text":" ","type":"text"},{"text":"first, which succeeds less frequently, before then trying the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"succeeds more often.","type":"text"}]},{"type":"heading","level":2,"text":"Backtracking","anchor":"Backtracking"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true},{"text":" parser is the primary tool for introducing backtracking into your parsers,","type":"text"},{"text":" ","type":"text"},{"text":"which means to undo the consumption of a parser when it fails. For more information, see the","type":"text"},{"text":" ","type":"text"},{"text":"article ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","isActive":true},{"text":".","type":"text"}]}]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"kind":"article","role":"article","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"title":"parse(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"text":" ","type":"text"},{"text":"input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"title":"PrefixUpTo","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","kind":"symbol","url":"\/documentation\/parsing\/prefixupto","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"type":"topic","url":"\/documentation\/parsing\/lazy","abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"navigatorTitle":[{"kind":"identifier","text":"Lazy"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","kind":"symbol","title":"Lazy","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lazy"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"type":"topic","url":"\/documentation\/parsing\/skip","navigatorTitle":[{"text":"Skip","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"Skip","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Skip","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"type":"topic","url":"\/documentation\/parsing\/fail","navigatorTitle":[{"kind":"identifier","text":"Fail"}],"role":"symbol","kind":"symbol","title":"Fail","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fail"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","role":"symbol","title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"abstract":[{"text":"A parser that consumes whitespace from the beginning of input.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/whitespace","navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"role":"symbol","kind":"symbol","title":"Whitespace","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}]},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"type":"topic","url":"\/documentation\/parsing\/end","navigatorTitle":[{"text":"End","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"End","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"type":"topic","url":"\/documentation\/parsing\/stream","navigatorTitle":[{"kind":"identifier","text":"Stream"}],"role":"symbol","kind":"symbol","title":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/replaceError(with:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/replaceError(with:)","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","role":"symbol","title":"replaceError(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"type":"topic","url":"\/documentation\/parsing\/newline","navigatorTitle":[{"kind":"identifier","text":"Newline"}],"role":"symbol","kind":"symbol","title":"Newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring.UnicodeScalarView"},{"type":"text","text":" into a parser on another"},{"type":"text","text":" "},{"type":"text","text":"view."}],"type":"topic","url":"\/documentation\/parsing\/fromunicodescalarview","navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"role":"symbol","kind":"symbol","title":"FromUnicodeScalarView","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"abstract":[{"type":"text","text":"A parser that consumes an integer from the beginning of a string."}],"type":"topic","url":"\/documentation\/parsing\/int","role":"article","kind":"article","title":"Int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"abstract":[{"text":"A parser that consumes the characters contained in a ","type":"text"},{"code":"CharacterSet","type":"codeVoice"},{"text":" from the beginning of a string.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/characterset","role":"article","kind":"article","title":"CharacterSet","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"abstract":[],"type":"topic","url":"\/documentation\/parsing\/fromutf8view","navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"role":"symbol","kind":"symbol","title":"FromUTF8View","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if it fails."}],"type":"topic","url":"\/documentation\/parsing\/optionally","navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"role":"symbol","kind":"symbol","title":"Optionally","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"role":"symbol","navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" into a parser on another view."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","url":"\/documentation\/parsing\/fromsubstring","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromSubstring","kind":"identifier"}],"kind":"symbol","title":"FromSubstring","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/parsers":{"type":"topic","url":"\/documentation\/parsing\/oneof\/parsers","kind":"symbol","role":"symbol","abstract":[],"title":"parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parsers","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parsers","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"title":"OneOf","type":"topic","url":"\/documentation\/parsing\/oneof","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"abstract":[{"type":"text","text":"A parser that succeeds if the given parser fails, and does not consume any input."}],"type":"topic","url":"\/documentation\/parsing\/not","navigatorTitle":[{"text":"Not","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"Not","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"abstract":[{"type":"text","text":"A parser that consumes a floating-point number from the beginning of a string."}],"type":"topic","url":"\/documentation\/parsing\/float","role":"article","kind":"article","title":"Float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"type":"topic","url":"\/documentation\/parsing\/peek","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"Peek","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"type":"topic","url":"\/documentation\/parsing\/always","navigatorTitle":[{"text":"Always","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"Always","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/init(_:)":{"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/init(_:)","type":"topic","url":"\/documentation\/parsing\/oneof\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"type":"topic","url":"\/documentation\/parsing\/bool","role":"article","kind":"article","title":"Bool","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/parse(_:)":{"type":"topic","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"role":"symbol","title":"parse(_:)","kind":"symbol","url":"\/documentation\/parsing\/oneof\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"type":"topic","url":"\/documentation\/parsing\/string","role":"article","kind":"article","title":"String","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"type":"topic","url":"\/documentation\/parsing\/startswith","navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"role":"symbol","kind":"symbol","title":"StartsWith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/prefixthrough","navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"role":"symbol","kind":"symbol","title":"PrefixThrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"role":"symbol","navigatorTitle":[{"text":"Rest","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that consumes everything to the end of the collection and returns this subsequence as"},{"type":"text","text":" "},{"type":"text","text":"its output."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","url":"\/documentation\/parsing\/rest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"kind":"symbol","title":"Rest","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","title":"UUID","url":"\/documentation\/parsing\/uuid","role":"article","type":"topic","abstract":[{"text":"A parser that consumes a ","type":"text"},{"type":"codeVoice","code":"UUID"},{"text":" value from the beginning of a string.","type":"text"}],"kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"kind":"symbol","role":"symbol","title":"AnyParser","type":"topic","url":"\/documentation\/parsing\/anyparser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}],"abstract":[{"text":"A type-erased parser of ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","navigatorTitle":[{"text":"AnyParser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"url":"\/documentation\/parsing\/parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","role":"symbol","title":"Parse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"navigatorTitle":[{"text":"Parse","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/many","navigatorTitle":[{"kind":"identifier","text":"Many"}],"role":"symbol","kind":"symbol","title":"Many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Many"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/Parser-Implementations":{"type":"topic","kind":"article","abstract":[],"url":"\/documentation\/parsing\/oneof\/parser-implementations","title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"abstract":[{"type":"text","text":"A parser that consumes a case-iterable, raw representable value from the beginning of a string."}],"type":"topic","url":"\/documentation\/parsing\/caseiterable","role":"article","kind":"article","title":"CaseIterable","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"title":"Prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","url":"\/documentation\/parsing\/prefix","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"type":"topic","url":"\/documentation\/parsing\/first","navigatorTitle":[{"text":"First","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"First","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOfBuilder":{"title":"OneOfBuilder","type":"topic","url":"\/documentation\/parsing\/oneofbuilder","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOfBuilder","kind":"identifier"}]}}}